/* -*- Mode: C; indent-tabs-mode: t; c-basic-offset: 4; tab-width: 4 -*- */
/*
 * main.c
 * Copyright (C) 2015 rudy <rudy@ubuntu>
 * 
 * thread-pool is free software: you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the
 * Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * thread-pool is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License along
 * with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

//线程池编程实现
#ifndef THREAD_POOL_H
#define THREAD_POOL_H

#include <stdio.h>
#include <stdlib.h>
#include <semaphore.h>//信号量sem_t
#include <pthread.h>


//任务接口,线程调用的函数
typedef void* (*FUNC)(void *arg);

//任务数据结构
typedef struct thread_pool_job_s
{
        FUNC function;//线程调用的函数
        void *arg;//函数参数
        struct thread_pool_job_s *pre;//指向上一个节点
        struct thread_pool_job_s *next;//指向下一个节点
}thread_pool_job;

//工作队列
typedef struct thread_pool_job_queue_s
{
        thread_pool_job *head;//队列头指针
        thread_pool_job *tail;//队列尾指针
        int num;//任务数目
        sem_t *quene_sem;//信号量
}thread_pool_job_queue;

//线程池(存放消费者进程)
typedef struct thread_pool_s
{
        pthread_t *threads;//线程
        int threads_num;//线程数目
        thread_pool_job_queue *job_queue;//指向工作队列的指针
}thread_pool;


//初始化线程池
thread_pool* tp_init(int thread_num);

//初始化工作队列
int tp_job_quene_init(thread_pool *tp);

//向工作队列中添加一个元素
void tp_job_quene_add(thread_pool *tp,thread_pool_job *new_job);

//向线程池中添加一个工作项
int tp_add_work(thread_pool *tp,void *(*func_p)(void *),void *arg);

//取得工作队列的最后个节点
thread_pool_job* tp_get_lastjob(thread_pool *tp);

//删除工作队列的最后个节点
int tp_delete__lastjob(thread_pool *tp);

//销毁线程池
void tp_destroy(thread_pool *tp);

//消费者线程函数
void* tp_thread_func(thread_pool *tp);

//生产者线程执行函数
void* thread_func_producer(thread_pool *tp);

#endif


